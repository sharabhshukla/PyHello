{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyHello - A demo project using mk docs","text":"<p>This is a demo project, showing the full power of using mkdocs for documentation of python repo. The site is deployed on github pages.</p> <p>Description:</p> <p>PyHello is a Python project designed to serve as a simple and beginner-friendly introduction to Python programming. It provides a foundation for individuals who are new to coding in Python and want to explore basic concepts while building a functional program.</p> <p>Project Features:</p> <ol> <li> <p>Hello, World!: The core feature of PyHello is a Python script that prints the classic \"Hello, World!\" message to the console. This serves as the first step in learning Python and demonstrates how to create a basic program.</p> </li> <li> <p>User Interaction: PyHello includes interactive elements, allowing users to input their name. The program then greets the user personally, fostering user engagement and demonstrating the use of variables and user input.</p> </li> <li> <p>Code Comments: Throughout the project, code comments are used to explain the purpose and functionality of different parts of the program. This encourages good coding practices and helps beginners understand the code better.</p> </li> <li> <p>Documentation: The project includes documentation that explains how to set up and run the Python script, making it accessible to individuals with minimal programming experience.</p> </li> <li> <p>Educational Resource: PyHello can serve as an educational resource or tutorial for Python beginners. It provides a gentle introduction to basic Python syntax, including print statements, variables, and input functions.</p> </li> <li> <p>Expandable: While PyHello is simple, it can be a starting point for learners to experiment and expand their Python skills. Users can build upon this foundation to create more complex programs.</p> </li> </ol> <p>Target Audience:</p> <ul> <li>Individuals new to Python programming who want a hands-on, interactive learning experience.</li> <li>Educators or instructors looking for a simple Python project to introduce programming concepts in a classroom or workshop setting.</li> </ul> <p>How to Use PyHello:</p> <ol> <li>Download or clone the PyHello project from the repository.</li> <li>Follow the provided documentation to set up your Python environment (if necessary).</li> <li>Run the Python script, and it will greet you with a personalized message.</li> </ol> <p>Note: PyHello is not intended for advanced programmers but rather for those taking their first steps in Python programming. It emphasizes simplicity, clarity, and the joy of programming.</p> <p>Overall, PyHello is a welcoming and approachable Python project that encourages newcomers to explore the world of coding while saying a friendly \"Hello, World!\"</p>"},{"location":"area/","title":"Area of various shapes","text":"<p>Certainly! Here's a write-up on the area calculation for a square and a circle:</p>"},{"location":"area/#area-calculation-for-a-square","title":"Area Calculation for a Square:","text":"<p>A square is a two-dimensional geometric shape characterized by four equal sides and four right angles. To calculate the area of a square, you need to know the length of one of its sides. The formula for finding the area (\\(A\\)) of a square with side length (\\(s\\)) is:</p> \\[ A = side ^ 2 \\] <p>In this formula, \\(s\\) represents the length of one side of the square. To calculate the area, you simply square the length of the side. This is because all four sides of a square are equal in length, so multiplying the side length by itself accounts for the entire area within the square's boundary.</p> <p>The area of a square is always expressed in square units (e.g., square inches, square meters) because it represents the amount of space enclosed by the square.</p>"},{"location":"area/#area-calculation-for-a-circle","title":"Area Calculation for a Circle:","text":"<p>A circle is a two-dimensional geometric shape defined by all points in a plane that are equidistant from a central point called the center. To calculate the area of a circle, you need to know the radius (\\(r\\)), which is the distance from the center to any point on the circle's boundary. The formula for finding the area (\\(A\\)) of a circle with radius (\\(r\\)) is:</p> \\[ A = \\pi r^2 \\] <p>In this formula, \\(\\pi\\) (pi) is a mathematical constant approximately equal to 3.14159. To calculate the area, you square the radius (\\(r\\)) and multiply it by \\(\\pi\\). This formula derives from the fact that the area of a circle is composed of infinitely small wedges, and the formula sums up the areas of these wedges.</p> <p>The area of a circle is also expressed in square units, and it represents the total space enclosed by the circular boundary.</p> <p>In summary, the area calculations for a square and a circle are straightforward mathematical formulas that depend on the dimensions of the shape. For a square, you square the length of one side (\\(s^2\\)), and for a circle, you square the radius and multiply by \\(\\pi\\) (\\(\\pi r^2\\)). These calculations are essential in various fields, including geometry, engineering, and everyday problem-solving where areas need to be determined.</p>"},{"location":"area/#src.area.area","title":"<code>area(c)</code>","text":"<p>Calculates the radius of a circle</p> Source code in <code>src\\area.py</code> <pre><code>@dispatch\ndef area(c: Circle) -&gt; float:\n\"\"\"Calculates the radius of a circle\"\"\"\nreturn pi * c.radius**2\n</code></pre>"},{"location":"assets/","title":"Shapes","text":""},{"location":"assets/#shapes-as-an-assets","title":"Shapes as an assets","text":"<ul> <li>Shapes</li> <li>Circle: A circle is a two-dimensional geometric shape characterized by a set of points in a plane  that are equidistant from a single fixed point called the center.  The distance from the center to any point on the circle is known as the radius.  Circles have no corners or angles and are defined solely by the constant radius length and  the center point. They are often used in mathematics and engineering to describe curves, and  in everyday life, they can represent objects like wheels and the outline of round objects.</li> </ul> <p>The area of a circle is calculated as: $$  A = \\pi * radius ^ 2 $$   * Square: A square is a two-dimensional geometric shape that is a special type of rectangle  with four equal sides and four right angles. In other words, all sides of a square have the same  length, and all angles between those sides measure 90 degrees. Squares are symmetrical and exhibit  uniformity in their properties, making them a fundamental shape in geometry. They are commonly used  in mathematics, architecture, and design due to their regularity and simplicity, often symbolizing  concepts like stability and balance.</p> <p>The area of a square is calculated as: $$   A = side ^ 2 $$</p> <p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>PyHello</code> project code.</p>"},{"location":"assets/#src.assets.AbstractBattery","title":"<code>AbstractBattery</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>This is an abstract battery class</p> Source code in <code>src\\assets.py</code> <pre><code>class AbstractBattery(BaseModel):\n\"\"\"\n    This is an abstract battery class\n    \"\"\"\nsize: float\ninverter_size: float\nefficiency: float\n</code></pre>"},{"location":"design-patterns/","title":"Object-Oriented Programming (OOP) vs. Multiple Dispatch","text":"<p>In software development, there are various approaches to solve problems and structure code. Two common paradigms are Object-Oriented Programming (OOP) and Multiple Dispatch. Let's explore these concepts using the example of calculating the area of a circle and a square.</p>"},{"location":"design-patterns/#object-oriented-programming-oop","title":"Object-Oriented Programming (OOP)","text":"<p>OOP is a programming paradigm that organizes code around objects, which are instances of classes. Each object encapsulates data (attributes) and behaviors (methods) related to a specific concept or entity.</p>"},{"location":"design-patterns/#example-calculating-area-using-oop","title":"Example: Calculating Area Using OOP","text":"<p>Let's create classes for Circle and Square, where each class has a method to calculate its area.</p> <p>```python class Circle:     def init(self, radius):         self.radius = radius</p> <pre><code>def calculate_area(self):\n    return 3.14159 * self.radius ** 2\n</code></pre> <p>class Square:     def init(self, side_length):         self.side_length = side_length</p> <pre><code>def calculate_area(self):\n    return self.side_length ** 2\n</code></pre> <p>```python @dispatch(Circle) def calculate_area(shape):     return 3.14159 * shape.radius ** 2</p> <p>@dispatch(Square) def calculate_area(shape):     return shape.side_length ** 2</p>"},{"location":"shapes/","title":"Shapes","text":"<p>Shapes, in a general sense, refer to the external form or outline of an object, entity, or geometric figure. They are the fundamental building blocks of spatial representation and can be described based on their characteristics, such as boundaries, dimensions, and structural properties. Shapes exist in both the natural world and in human-made objects, and they play a crucial role in fields like mathematics, art, design, engineering, and science.</p> <p>Key points to consider in a general definition of shapes:</p> <ul> <li> <p>Form and Outline: Shapes are primarily concerned with the outer boundary or silhouette of an object. They define the visible structure of an entity, often disregarding its internal details or content.</p> </li> <li> <p>Geometry: Shapes have geometric properties that can be described using mathematical concepts. These properties include dimensions (length, width, height), angles, symmetry, and curvature.</p> </li> <li> <p>Classification: Shapes can be categorized into various types based on their attributes and characteristics. Common classifications include polygons, circles, ellipses, curves, and irregular shapes.</p> </li> <li> <p>Representation: Shapes can be represented visually through drawings, diagrams, or computer graphics. They are often used as a means of conveying information, illustrating concepts, or creating aesthetic compositions.</p> </li> <li> <p>Versatility: Shapes can be simple or complex, and they can be combined or transformed to create more intricate forms. Their versatility allows them to be used creatively in various applications.</p> </li> <li> <p>Functional and Aesthetic Roles: Shapes serve both functional and aesthetic purposes. In design and art, they can evoke emotions, communicate ideas, and influence perception. In engineering and architecture, they are essential for structural integrity and aesthetics.</p> </li> <li> <p>In Nature and Human-Made World: Shapes are observed in the natural world, such as the shapes of leaves, clouds, or geological formations. They are also prevalent in human-made objects, ranging from buildings and vehicles to logos and icons.</p> </li> </ul> <p>In summary, shapes encompass a broad range of visual and geometric entities that define the external appearance of objects and structures. They are integral to our understanding of the world around us and are used extensively in various disciplines to convey information, express creativity, and solve problems.</p>"},{"location":"shapes/#src.shapes.AbstractShape","title":"<code>AbstractShape</code>","text":"<p>Abstract class for a shape</p> Source code in <code>src\\shapes.py</code> <pre><code>class AbstractShape(metaclass=ABCMeta):\n\"\"\" Abstract class for a shape\"\"\"\npass\n</code></pre>"},{"location":"shapes/#src.shapes.Circle","title":"<code>Circle</code>  <code>dataclass</code>","text":"<p>             Bases: <code>AbstractShape</code></p> <p>A circle geometric shape</p> Source code in <code>src\\shapes.py</code> <pre><code>@dataclass\nclass Circle(AbstractShape):\n\"\"\" A circle geometric shape\"\"\"\nradius: float\n</code></pre>"},{"location":"shapes/#src.shapes.Square","title":"<code>Square</code>  <code>dataclass</code>","text":"<p>             Bases: <code>AbstractShape</code></p> <p>Square shape class</p> Source code in <code>src\\shapes.py</code> <pre><code>@dataclass\nclass Square(AbstractShape):\n\"\"\" Square shape class\"\"\"\nside: float\n</code></pre>"},{"location":"shapes/#src.shapes_oops.Circle","title":"<code>Circle</code>  <code>dataclass</code>","text":"<p>A circle class</p> Source code in <code>src\\shapes_oops.py</code> <pre><code>@dataclass\nclass Circle:\n\"\"\"A circle class\"\"\"\nradius: float\ndef area(self) -&gt; float:\n\"\"\"This method returns the area of the shape\"\"\"\nreturn pi * self.radius**2\n</code></pre>"},{"location":"shapes/#src.shapes_oops.Circle.area","title":"<code>area()</code>","text":"<p>This method returns the area of the shape</p> Source code in <code>src\\shapes_oops.py</code> <pre><code>def area(self) -&gt; float:\n\"\"\"This method returns the area of the shape\"\"\"\nreturn pi * self.radius**2\n</code></pre>"},{"location":"shapes/#src.shapes_oops.Square","title":"<code>Square</code>  <code>dataclass</code>","text":"<p>A square class</p> Source code in <code>src\\shapes_oops.py</code> <pre><code>@dataclass\nclass Square:\n\"\"\"A square class\"\"\"\nside: float\ndef area(self) -&gt; float:\n\"\"\"This method returns an area of the shape\"\"\"\nreturn self.side**2\n</code></pre>"},{"location":"shapes/#src.shapes_oops.Square.area","title":"<code>area()</code>","text":"<p>This method returns an area of the shape</p> Source code in <code>src\\shapes_oops.py</code> <pre><code>def area(self) -&gt; float:\n\"\"\"This method returns an area of the shape\"\"\"\nreturn self.side**2\n</code></pre>"}]}